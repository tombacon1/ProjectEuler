using System.Diagnostics;

internal class EulerProject8
{
    static readonly string question = "The sequence of triangle numbers is generated by adding the natural numbers.\r\n" + 
                                      "So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.\r\n\r\n" + 
                                      "The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...\r\n\r\n" + 
                                      "Let us list the factors of the first seven triangle numbers:\r\n\r\n" + 
                                      " 1: 1\r\n 3: 1,3\r\n 6: 1,2,3,6\r\n10: 1,2,5,10\r\n15: 1,3,5,15\r\n21: 1,3,7,21\r\n28: 1,2,4,7,14,28\r\n\r\n" + 
                                      "We can see that 28 is the first triangle number to have over five divisors.\r\n\r\n" + 
                                      "What is the value of the first triangle number to have over five hundred divisors?";
    static readonly string separator = new string('-', 50) + "\r\n";


    static void Main()
    {
        Console.WriteLine(question);
        Console.WriteLine(separator);
        Stopwatch sw = Stopwatch.StartNew();

        int numDivisors = 0;
        List<int> factors = new List<int>();
        int input = 0;
        int triangleNumber = 0;

        while (numDivisors <= 500)
        {
            input++;
            triangleNumber = GetTriangleNumber(input);
            factors = GetFactors(triangleNumber);
            numDivisors = factors.Count;
        }



        sw.Stop();

        factors.Sort();
        string factorString = String.Empty;
        int lastFactor = factors.Last();
        foreach (int factor in factors)
        {
            factorString += factor.ToString();
            if (factor != lastFactor)
                factorString += ",";
        }

        Console.WriteLine("Elapsed: " + sw.ElapsedMilliseconds + "ms");
        Console.WriteLine("Number of divisors: " + numDivisors);
        //Console.WriteLine("Divisors:");
        //Console.WriteLine(factorString + "\r\n");
        Console.WriteLine("Result: " + triangleNumber);
        Console.ReadLine();
    }

    private static List<int> GetFactors(int triangleNumber)
    {
        List<int> factors = new List<int>();
        int highestfactor = triangleNumber;
        for (int i = 1; i < highestfactor; i++)
        {
            if(triangleNumber % i == 0)
            {
                highestfactor = triangleNumber / i;
                factors.Add(highestfactor);
                factors.Add(i);
            }
        }
        return factors;
    }

    private static int GetTriangleNumber(int input)
    {
        int triangleNumber = 0;

        for (int i = 1; i <= input; i++)
            triangleNumber += i;    

        return triangleNumber;
    }
}
